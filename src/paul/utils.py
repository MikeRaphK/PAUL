from .tool_logger import ToolLogger
from github.Repository import Repository
from github.PullRequest import PullRequest
from langchain_community.callbacks.openai_info import OpenAICallbackHandler
from subprocess import run
from typing import Tuple, Dict

import json
import os
import re



def check_env_vars() -> Tuple[str, str]:
    """
    Loads and validates required environment variables.

    Returns:
        Tuple[str, str]: A tuple containing the GitHub token and OpenAI API key.

    Raises:
        ValueError: If either `GITHUB_TOKEN` or `OPENAI_API_KEY` is not set.
    """

    GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
    if not GITHUB_TOKEN:
        raise ValueError("GITHUB_TOKEN is not set.")

    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    if not OPENAI_API_KEY:
        raise ValueError("OPENAI_API_KEY is not set.")
    
    return GITHUB_TOKEN, OPENAI_API_KEY



def setup_git_environment() -> None:
    """
    Set up the local Git environment for safe repository operations in a Docker-based GitHub Action.

    Raises:
        subprocess.CalledProcessError: If any git command fails.
        AssertionError: If the .git directory does not exist in /github/workspace.
    """
    os.chdir("/github/workspace")
    os.environ["GIT_DIR"] = os.path.abspath(".git")
    os.environ["GIT_WORK_TREE"] = os.getcwd()
    run(["git", "config", "user.email", "paul-bot@users.noreply.github.com"], check=True)
    run(["git", "config", "user.name", "paul-bot"], check=True)
    run(["git", "config", "--global", "--add", "safe.directory", os.getcwd()])



def parse_paul_response(content: str, issue_number: int, token_logger: OpenAICallbackHandler, tool_logger: ToolLogger) -> Dict[str, str]:
    """
    Parse JSON response from PAUL.

    Args:
        content (str): The raw string content from the LLM, possibly wrapped in code fences.
        issue_number (int): The GitHub issue number for reference in the PR body.
        token_logger (OpenAICallbackHandler): The callback object containing LLM usage statistics.
        tool_logger (ToolLogger): The callback object containing tool usage information.

    Returns:
        Dict[str, str]: The enriched JSON object containing PR details and additional metadata.
    """
    # Remove leading and trailing fences
    content = content.strip()
    if content.startswith("```"):
        content = re.sub(r"^```(?:json)?\s*", "", content)
        content = re.sub(r"\s*```$", "", content)
    content_json = json.loads(content)

    # Add starting note
    content_json["pr_body"] =  "> **Note:** This message was automatically generated by PAUL. Please review the proposed changes carefully before merging.\n\n" + content_json["pr_body"] + "\n\n"
    
    # Add tool usage info
    if tool_logger.calls:
        content_json["pr_body"] += "Tool calls:\n"
        for i, (name, arg) in enumerate(tool_logger.calls, 1):
            tool_stats_str += f"{i}. `{name}` called with: `{arg}`\n"
    else:
        content_json["pr_body"] += "No tools were used in this run.\n"
    content_json["pr_body"] += "\n"

    # Add token usage info
    content_json["pr_body"] += f"Tokens Used: {token_logger.total_tokens}\n"
    content_json["pr_body"] += f"Successful Requests: {token_logger.successful_requests}\n"
    content_json["pr_body"] += f"Total Cost (USD): {token_logger.total_cost:.6f}\n\n"

    # Add ending note
    content_json["pr_body"] += f"Related to #{issue_number}\n"

    return content_json



def create_pull_request(content_json: Dict[str, str], branch_name: str, repo: Repository) -> PullRequest:
    """
    Commit local changes and create a pull request on GitHub.

    Args:
        content_json (Dict[str, str]): Dictionary containing the commit message, PR title, and PR body.
        branch_name (str): Name of the branch to push and use as the PR head.
        repo (Repository): PyGithub Repository object for the target repo.

    Returns:
        PullRequest: The created GitHub PullRequest object.
    """

    # Commit and push
    run(["git", "add", "."], check=True)
    run(["git", "commit", "-m", content_json["commit_msg"]], check=True)
    run(["git", "push", "--set-upstream", "origin", branch_name], check=True)

    # Create pull request
    pr = repo.create_pull(
        title=content_json["pr_title"],
        body=content_json["pr_body"],
        head=branch_name,
        base=repo.default_branch,
        draft=False
    )
    return pr